// Generated by CoffeeScript 1.9.3
(function() {
  var Descriptor, EFFECT_TYPE, EffectLayerInfo, LayerInfo, LazyExecute, _, parseEngineData,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  parseEngineData = require('parse-engine-data');

  LayerInfo = require('../layer_info.coffee');

  Descriptor = require('../descriptor.coffee');

  LazyExecute = require('../lazy_execute.coffee');

  EFFECT_TYPE = {
    commonState: require('../layer_info/effect_info/common_state.coffee'),
    dropShadow: require('../layer_info/effect_info/drop_shadow.coffee'),
    innerShadow: require('../layer_info/effect_info/inner_shadow.coffee'),
    outerGlow: require('../layer_info/effect_info/outer_glow.coffee'),
    innerGlow: require('../layer_info/effect_info/inner_layer_id.coffee')
  };

  module.exports = EffectLayerInfo = (function(superClass) {
    extend(EffectLayerInfo, superClass);

    EffectLayerInfo.shouldParse = function(key) {
      return key === 'lrFX';
    };

    function EffectLayerInfo(layer, length) {
      EffectLayerInfo.__super__.constructor.call(this, layer, length);
      this.version = null;
      this.effectCount = null;
      this.type_key = null;
      this.block_size = null;
      this.Detail = [];
    }

    EffectLayerInfo.prototype.parse = function() {
      var i, j, keyParseable, klass, name, ref, results;
      this.version = this.file.readShort();
      this.effectCount = this.file.readShort();
      results = [];
      for (i = j = 0, ref = this.effectCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        this.file.seek(4, true);
        this.type_key = this.file.readString(4);
        this.block_size = this.file.readInt();
        console.log("key: " + this.type_key + " size: " + this.block_size + "pos: " + this.file.tell());
        keyParseable = false;
        for (name in EFFECT_TYPE) {
          if (!hasProp.call(EFFECT_TYPE, name)) continue;
          klass = EFFECT_TYPE[name];
          if (!klass.shouldParse(this.type_key)) {
            continue;
          }
          i = new klass(this.file, this.block_size);
          this.Detail[name] = i.parse();
          console.log(i["export"]());
          keyParseable = true;
          break;
        }
        if (!keyParseable) {
          results.push(this.file.seek(this.block_size, true));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    EffectLayerInfo.prototype["export"] = function() {
      return {
        key: this.type_key
      };
    };

    return EffectLayerInfo;

  })(LayerInfo);

}).call(this);
